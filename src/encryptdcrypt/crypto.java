/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package encryptdcrypt;

import java.io.File;
import java.io.IOException;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.PrivateKey;
import java.security.PublicKey;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author lenovo
 */
public class crypto extends javax.swing.JFrame {

    /**
     * Creates new form crypto
     */
    public crypto() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        GK = new javax.swing.JButton();
        input = new javax.swing.JTextField();
        Encrypt = new javax.swing.JButton();
        out = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        keygen = new javax.swing.JTextField();
        pubkey = new javax.swing.JRadioButton();
        pvtKey = new javax.swing.JRadioButton();
        browse = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        GK.setText("Generate key");
        GK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GKActionPerformed(evt);
            }
        });

        input.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputActionPerformed(evt);
            }
        });

        Encrypt.setText("En public Key");
        Encrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EncryptActionPerformed(evt);
            }
        });

        jButton4.setText("Dcr Public key");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Dcr Privare key");

        keygen.setText("C:\\Users\\lenovo\\Music");

        pubkey.setText("public key");
        pubkey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pubkeyActionPerformed(evt);
            }
        });

        pvtKey.setText("Private key");

        browse.setText("Browse");
        browse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(133, 133, 133)
                        .addComponent(browse)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                                .addComponent(jButton5)
                                .addGap(19, 19, 19))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(keygen)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(GK)
                                .addContainerGap())))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(out, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 141, Short.MAX_VALUE)
                            .addComponent(input, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGap(28, 28, 28)
                        .addComponent(Encrypt)
                        .addGap(30, 30, 30)
                        .addComponent(pubkey)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(pvtKey)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(GK)
                    .addComponent(keygen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(browse))
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(input, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Encrypt)
                    .addComponent(pubkey)
                    .addComponent(pvtKey))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 43, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(out, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton4)
                    .addComponent(jButton5))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void GKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GKActionPerformed
        // TODO add your handling code here:
        

        if(keygen.getText().equals(""))
        {
            JOptionPane.showMessageDialog(null, "Select the path to generate the keys");
        }
        else{
            String path_pub = keygen.getText() + "/publicKey";
            String path_priv = keygen.getText() + "/privateKey";
            File f1 = new File(path_pub);
            File f2 = new File(path_priv);
            int file_exist = -1;
            if(f1.exists() || f2.exists())
            {
                int dialogButton = JOptionPane.YES_NO_OPTION;
                file_exist = JOptionPane.showConfirmDialog (null, "Private key or Public key is already existing in the path. Do you want to overwrite it?","Warning",dialogButton);
                if(file_exist == JOptionPane.YES_OPTION){
                    
                }
            }
            if(file_exist == -1 || file_exist == 0){

                Gkeys gk;
                try {
                    gk = new Gkeys(1024);
                    gk.createKeys();
                    gk.writeToFile(path_pub, gk.getPublicKey().getEncoded());
                    gk.writeToFile(path_priv, gk.getPrivateKey().getEncoded());
                    JOptionPane.showMessageDialog(null, "Key Pair Generation Successfull");
                }
                catch (NoSuchAlgorithmException | NoSuchProviderException e) {
                    System.err.println(e.getMessage());
                }
                catch (IOException e) {
                    System.err.println(e.getMessage());
                }
                catch (Exception e) {
                    System.err.println(e.getMessage());
                }
            }
        }
    
        
    }//GEN-LAST:event_GKActionPerformed

    private void inputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_inputActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed

    private void EncryptActionPerformed(java.awt.event.ActionEvent evt) {                                        
        // TODO add your handling code here:
        try{

            EncryptDcrypt ac = new EncryptDcrypt();
            String path_pub = keygen.getText() + "/privateKey";
            String path_priv = keygen.getText() + "/publicKey";
            File f1 = new File(path_pub);
            File f2 = new File(path_priv);
            if(!f1.exists() || !f2.exists())
            {
                JOptionPane.showMessageDialog(null, "Private key or Public key not exist in the given path. Generate the key pair");
            }
            else{
                String msg = input.getText();
                if(pvtKey.isSelected())
                {
                    PrivateKey privateKey = ac.getPvt(path_pub);
                    String encrypted_msg = ac.encryptText(msg, privateKey);
                    out.setText(encrypted_msg);
                }
                else if(pubkey.isSelected())
                {
                    PublicKey publicKey = ac.getPub(path_priv);
                    String encrypted_msg = ac.encryptText(msg, publicKey);
                    out.setText(encrypted_msg);
                }
                /*
                if (new File("KeyPair/text.txt").exists()) {
                    ac.encryptFile(ac.getFileInBytes(new File("KeyPair/text.txt")),
                            new File("KeyPair/text_encrypted.txt"),privateKey);
                    ac.decryptFile(ac.getFileInBytes(new File("KeyPair/text_encrypted.txt")),
                            new File("KeyPair/text_decrypted.txt"), publicKey);
                } else {
                    System.out.println("Create a file text.txt under folder KeyPair");
                }
                */
            }
        }
        catch(Exception ex){
            System.err.println(ex.getMessage());
            JOptionPane.showMessageDialog(null, ex.getMessage());
        }
        // TODO add your handling code here:
                                               



    }                                       

    private void pubkeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pubkeyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pubkeyActionPerformed

    private void browseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseActionPerformed

        JFileChooser fileChooser = new JFileChooser();
 
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
 
        fileChooser.setAcceptAllFileFilterUsed(false);
 
        int rVal = fileChooser.showOpenDialog(null);
        if (rVal == JFileChooser.APPROVE_OPTION) {
          keygen.setText(fileChooser.getSelectedFile().toString());
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_browseActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(crypto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(crypto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(crypto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(crypto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(crypto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(crypto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(crypto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(crypto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new crypto().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Encrypt;
    private javax.swing.JButton GK;
    private javax.swing.JButton browse;
    private javax.swing.JTextField input;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JTextField keygen;
    private javax.swing.JTextField out;
    private javax.swing.JRadioButton pubkey;
    private javax.swing.JRadioButton pvtKey;
    // End of variables declaration//GEN-END:variables
}
